function [R1_x,R1_y] = S4_VaneRotorForces_C(d,L,n_van,theta_vane,alpha,BM,BN,F_m,F_v,T_m,T_v,Fp_cava,Fp_1_cava,Fp_2_cava,p_cell,c,Npt,Npt_cell,sgn,th_tilt)
% Compute the reaction force acting on shaft. This force is later used to
% calculate friction torque in bushing. Shaft reaction force is the sum of:
% - Rotor reaction forces (F_m, F_v, T_m, T_v)
% - Pressure force acting on rotor surface
% INPUT:
% d                 [m]     : rotor diameter
% L                 [m]     : rotor length
% n_van             [-]     : number of vanes
% theta_vane        [rad]   : discretized angular position between (0:2pi)
% alpha             [rad]   : angular position of point A
% th_tilt           [rad]   : vane tilt angle
% BM, BN            [m]     : rotor-vane chord
% F_m               [N]     : reaction force in rotor-vane contact point
% F_v               [N]     : reaction force at vane bottom
% T_m               [N]     : friction force in rotor-vane contact point (generated by F_m) 
% T_v               [N]     : friction force at vane bottom (generated by F_v) 
% Fp_cava           [N]     : pressure force on bottom of vane
% Fp_1_cava         [N]     : pressure force on undisclosed vane side - suction side
% Fp_2_cava         [N]     : pressure force on undisclosed vane side - pressure side
% p_cell            [pa]    : vector of pressure in the chamber (-gamma:2pi)
% c                 [-]     : cylindrical/elliptical stator
% Npt               [-]     : grid discretization points
% Npt_cell          [-]     : cell discretization points
%
% OUTPUT
% R1_x              [N]     : x-component of shaft reaction force due to a single vane
% R1_y              [N]     : y-component of shaft reaction force due to a single vane

% NOTE
% - all force used and computed act on a single vane,
%    so also shaft reaction forces are due to a single vane, and must be 
%    integrated later
% - shaft reaction forces are computed with a cartesian reference system located at shaft center,
%    hence all the forces calculated must be projected on a x-y reference system
% 
% HISTORY : V10.1_DeFranco_Genoni_Gianoncelli: redefinition of Rx_theta,
% Ry_theta, R_rx, R_ry (further information available in the thesis and on the related material)
    %% DECLARATION %%
    method = '-';        % use method 'fOLD' ONLY in case you desire to use Vallone 7.0, otherwise 
                         % leave '-' to use Franzetti-Persico method.
    
    %% PRELIMINARY CALCULATIONS %%
    out = Npt-Npt_cell;  % pointer for trailing vane in tangency position
        
    %% ROTOR REACTION FORCE CALCULATION %%
    Rx_theta = (-F_m + F_v - Fp_1_cava + Fp_2_cava).*cos(th_tilt) + (T_m + T_v - Fp_cava).*sin(th_tilt);    % vane perpendicular forces transfered to theta_vane x axis
    Ry_theta = -(-F_m + F_v - Fp_1_cava + Fp_2_cava).*sin(th_tilt) + (T_m + T_v - Fp_cava).*cos(th_tilt);   % vane axial forces transfered to theta_vane y axis
            
    % plot di verifica
    % Vettore posizioni angolari
    %theta_pt =(1:Npt);
    %theta_deg = theta_pt.*360/Npt;

    %figure, hold on,grid on, box on;
    %plot(theta_deg,Rx_theta,'b',theta_deg,Ry_theta,'r');
    %xlim([0 360]);
    %title('Verifica');
    %xlabel('theta [deg]');
    %ylabel('[deg]');
    %legend('alpha');
    %fine plot di verifica

    % projection of rotor reaction forces on a cartesian reference system [N] 
    R_rx = Rx_theta.*sin(theta_vane) - Ry_theta.*cos(theta_vane);               % Rotor reaction forces transferred to x-axis
    R_ry = Rx_theta.*cos(theta_vane) + Ry_theta.*sin(theta_vane);               % Rotor reaction forces transferred to y-axis

    switch method
        case 'fOLD'
              R_rx = (R1.*cos(alpha) + R2.*sin(alpha));
              R_ry = (R1.*sin(alpha) - R2.*cos(alpha));
    end
    
    clear Rx_theta Ry_theta

    %% ROTOR PRESSURE FORCE CALCULATION %%
    % rotor surface exposed to pressure [m2]
    gamma_1           = 2.*asin(BM/d);                                     % half-angle occupied by vane  (BM side)
    gamma_2           = 2.*asin(BN/d);                                     % half-angle occupied by vane (BN side)
    S_i (1:Npt_cell)  = ((theta_vane(1:Npt_cell))-gamma_2)*d/2*L;          % first part of rotation, cell is definied by tangency and leading vane
    S_m (1:out)       = repelem((2*pi/n_van-gamma_1-gamma_2)*d/2*L, out);  % second part of rotation, cell is defined between 2 vanes
    S_f (1:Npt_cell)  = (2*pi/c-theta_vane(out+1:end)-gamma_1)*d/2*L;      % final part of rotation, cell is definied by tangency and trailing vane
    % pressure force on rotor surface defined by a cell [N] 
    Frot_i(1:Npt_cell) = p_cell(1:Npt_cell).*S_i;               % pressure force in first part of rotation
    Frot_m(1:out)      = p_cell(Npt_cell+1:Npt_cell+out).*S_m;  % pressure force in second part of rotation
    Frot_f(1:Npt_cell) = p_cell(Npt_cell+out+1:end).*S_f;       % pressure force in final part of rotation
    % negative values are set to zero
    Frot_i(Frot_i<0)=0;
    Frot_m(Frot_m<0)=0;
    Frot_f(Frot_f<0)=0;
    
    % half cell angle [rad]
    delta                = gamma_1 + (2*pi/n_van - gamma_1 - gamma_2)*0.5;
    deltav_i(1:Npt_cell) = (theta_vane(1:Npt_cell)-gamma_2)/2;
    deltav_f(1:Npt_cell) = (theta_vane(1:Npt_cell)-gamma_1)/2;

    % projection of rotor pressure forces on a cartesian reference system [N]
    R_px(1:out)                    =  Frot_m(1:out).*cos(theta_vane(1:out)+delta);    
    R_px(out+1:length(theta_vane)) =  Frot_f.*cos(theta_vane(out+1:end)+fliplr(deltav_f)) + Frot_i.*cos(deltav_i);
    R_py(1:out)                    = -Frot_m(1:out).*sin(theta_vane(1:out)+delta); 
    R_py(out+1:length(theta_vane)) = -Frot_f.*sin(theta_vane(out+1:end)+fliplr(deltav_f)) - Frot_i.*sin(deltav_i);
    
    switch method
        case 'fOLD'
          R_px(1:out)                    = -Frot_m(1:out).*sin(theta_vane(1:out)+delta);    
          R_px(out+1:length(theta_vane)) = -Frot_f.*sin(theta_vane(out+1:end)+fliplr(deltav_f)) - Frot_i.*sin(deltav_i);
          R_py(1:out)                    = Frot_m(1:out).*cos(theta_vane(1:out)+delta); 
          R_py(out+1:length(theta_vane)) = Frot_f.*cos(theta_vane(out+1:end)+fliplr(deltav_f)) + Frot_i.*cos(deltav_i);         
    end
    clear thetaPala out gamma_primo1 gamma_primo2 GAMMA GAMMAi GAMMAf S Si Sf delta deltav_i deltav_f method
    
    %% SHAFT REACTION FORCES %%
    % Sum of all forces acting on shaft: rotor reaction forces and rotor pressure force
    R1_x = R_rx + R_px; % x-comp of shaft reaction force [N]
    R1_y = R_ry + R_py; % y-comp of shaft reaction force [N]
    R1_x(end)  = [];    % last values are deleted, since they are a repetition of the first ones
    R1_y(end)  = [];
    clear R_rx  R_px R_ry  R_py
    
  end