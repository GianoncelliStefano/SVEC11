function [R1_x,R1_y] = S4_VaneRotorForces_E(d,L,n_van,theta_vane,F_m,F_v,T_m,T_v,p_cell,c,Npt,Npt_cell)
% Compute the reaction force acting on shaft. This force is later used to
% calculate friction torque in bushing. Shaft reaction force is the sum of:
% - Rotor reaction forces (F_m, F_v, T_m, T_v)
% - Pressure force acting on rotor surface
% INPUT:
% d [m]            : rotor diameter
% L [m]            : rotor length
% n_van [-]        : number of vanes
% theta_vane [rad] : discretized angular position between [0:2pi]
% F_m [N]          : reaction force in rotor-vane contact point
% F_v [N]          : reaction force at vane bottom
% T_m [N]          : friction force in rotor-vane contact point (generated by F_m) 
% T_v [N]          : friction force at vane bottom (generated by F_v) 
% p_cell [Pa]      : vector of pressure in the chamber (-gamma:2pi)
% c [-]            : geometry flag
% Npt [-]          : grid discretization points
% Npt_cell [-]     : cell discretization points
%
% OUTPUT
% R1_x [N]         : x-component of shaft reaction force due to a single vane
% R1_y [N]         : y-component of shaft reaction force due to a single vane

% NOTE
% - all force used and computed act on a single vane,
%    so also shaft reaction forces are due to a single vane, and must be 
%    integrated later
% - shaft reaction forces are computed with a cartesian reference system located at shaft center,
%    hence all the forces calculated must be projected on a x-y reference system

    %% PRELIMINARY COMPUTATIONS %%
    out = Npt-Npt_cell;  % pointer for trailing vane in tangency position

    %% ROTOR REACTION FORCE CALCULATION %%
    R_rx = (-F_m + F_v).*cos(theta_vane) + (T_m+T_v).*sin(theta_vane); % x-component [N]
    R_ry = (-F_m + F_v).*sin(theta_vane) - (T_m+T_v).*cos(theta_vane); % y-component [N]

    %% ROTOR PRESSURE FORCE CALCULATION %%
    % rotor surface exposed to pressure [m2]
    S_i(1:Npt_cell) = theta_vane(1:Npt_cell)*d/2*L;          % first part of rotation, cell is definied by tangency and leading vane
    S_m             = repelem(pi*d/n_van*L,out);             % second part of rotation, cell is defined between 2 vanes
    S_f(1:Npt_cell) = (2*pi/c-theta_vane(out+1:end))*d/2*L;  % final part of rotation, cell is definied by tangency and trailing vane
    % pressure force on rotor surface defined by a cell [N] 
    Frot_i(1:Npt_cell) = p_cell(1:Npt_cell).*S_i;               % pressure force in first part of rotation
    Frot_m(1:out)      = p_cell(Npt_cell+1:Npt_cell+out).*S_m;  % pressure force in second part of rotation
    Frot_f(1:Npt_cell) = p_cell(Npt_cell+out+1:end).*S_f;       % pressure force in final part of rotation
    % negative values are set to zero
    Frot_i(Frot_i<0)=0;
    Frot_m(Frot_m<0)=0;
    Frot_f(Frot_f<0)=0;

    % half cell angle [rad]
    delta              = pi/n_van;
    deltav(1:Npt_cell) = theta_vane(1:Npt_cell)/2;

    % projection of rotor pressure forces on a cartesian reference system [N]
    R_px(1:out)                    = -Frot_m(1:out).*sin(theta_vane(1:out)+delta);
    R_px(out+1:length(theta_vane)) = -Frot_f.*sin(theta_vane(out+1:end)+fliplr(deltav)) - Frot_i.*sin(deltav);
    R_py(1:out)                    = Frot_m(1:out).*cos(theta_vane(1:out)+delta); 
    R_py(out+1:length(theta_vane)) = Frot_f.*cos(theta_vane(out+1:end)+fliplr(deltav)) + Frot_i.*cos(deltav);
    clear thetaPala out GAMMA GAMMAi GAMMAf S Si Sf delta deltav

    %% SHAFT REACTION FORCES %%
    % Sum of all forces acting on shaft: rotor reaction forces and rotor pressure force
    R1_x = R_rx + R_px; % x-comp of shaft reaction force [N]
    R1_y = R_ry + R_py; % y-comp of shaft reaction force [N]  
    R1_x(end)   = [];   % last values are deleted, since they are a repetition of the first ones
    R1_y(end)   = [];
    
    % variables calculated are transferred on an elliptical basis (0:pi) --> (0:2pi)
    % the change of sign in needed since the reference system is the same but the forces are opposite
    R1_x      = [R1_x -R1_x];
    R1_y      = [R1_y -R1_y];
    
    clear R_rx  R_px R_ry  R_py
end