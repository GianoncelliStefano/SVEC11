function [MaxMf,N_sMaxMf,T_sMaxMf,posMaxMf,N_posMaxMf,T_posMaxMf,Mf_posMaxMf] = S6_InternalActions(L,s,mass_vane,UPSILON,UPSILON_tip_1,UPSILON_tip_2,VI,sVB,sBI,aGi,aIVcentr_i,F_v,T_v,F_m,T_m,F_t,T_t,Fp_cava,Fp_1_tip,Fp_2_tip,F_cor,F_centr_j,Fw_i,Fw_j,C_izG,Mf_ax,n_pos,p_2,p_1,pos_contct,sgn,toll_d,toll_t)
% This function computes the axial, shear, and bending internal action
% acting on the vane. The calculations are performed with a virtual work
% principle, starting from the vane ends and moving toward the vane-rotor
% contact point B. Then, it is verified that in this point the internal
% actions are congruent
% INPUT
% L [m]                : vane depth
% s [m]                : vane thickness
% mass_vane [kg]       : vane mass
% UPSILON [rad]        : tip reaction force angle
% UPSILON_tip_1 [rad]  : tip pressure force angle - suction side
% UPSILON_tip_2 [rad]  : tip pressure force angle - pressure side
% VI [m]               : 1D length of vane
% sDB [m]              : cell-array of DB discretized lenght 
% sBI [m]              : cell-array of BC discretized lenght
% aGi [m/s2]           : axial component of vane center of mass inertial acceleration
% aIVcentr_i [m/s2]    : matrix that has on the first row the vector of the axial centripetal acceleration of point I (vane tip)
%                          and on the second row the the vector of ther axial centripetal acceleration of point V (vane bottom)
% F_v [N]              : vane bottom reaction force
% T_v [N]              : vane bottom friction force (generated by F_v)
% F_m [N]              : reaction force in rotor-vane contact point
% T_m [N]              : friction force in rotor-vane contact point (generated by F_m) 
% F_t [N]              : vane tip reaction force
% T_t [N]              : vane tip friction force (generated by F_t)
% Fp_cava [N]          : force on the bottom of the vane
% Fp_1_tip [N]         : force on tip - suction side
% Fp_2_tip [N]         : foece on tip - suction side
% F_cor [N]            : coriolis force
% F_centr_j [N]        : vane centrifugal force (component perpendicular to vane)
% Fw_i [N]             : i-comp. weight force
% Fw_j [N]             : j-comp. weight force
% C_izG [Nm]           : inertial torque
% Mf_ax [Nm]           : Bending action due to axial forces
% Npt [-]              : number of grid discretization points in [0:2pi]
% sgn                  : vane tilt angle
% p_2  [pa]            : pressure side pressure
% p_1  [pa]            : suction side pressure
% pos_contct [-]       : position of the point preceeding rotor - vane contact point for each discretized angular position
% sgn [-]              : discriminant of vane tilt angle
% toll_d               : numeric tolerance
% toll_t               : theoretical tollerance
%
%OUTPUT
% MaxMf [Nm]           : absolute maximum of Mf
% N_sMaxMf [N]         : value of N in the most strained point
% T_sMaxMf [N]         : value of T in the most strained point
% posMaxMf [rad]       : discretized angular position where maxMf has been found
% N_posMaxMf [N]       : internal action N for the angular position and vane abscissa where maxMf has been found
% T_posMaxMf [T]       : internal action T for the angular position and vane abscissa where maxMf has been found
% Mf_posMaxMf [Nm]     : internal action Mf for the angular position and vane abscissa where maxMf has been found
% 
% NOTE: * The inertial momentum and the momentum due to axial forces
%         are supposed to be spreaded all over vane length
%       * The net load on concealed side is supposed to be equal to zero if the
%         vane is 1D, while is considered triangular for 2D vane
%       * Research and estraction of N and T values in the most stressed point
%         If this point is the vane-rotor interseption point (point B), since a
%         force is applied here, this is also a point of discontinuity.
%         Hence, the maximum value of N and T must be taken.

   %% PREALLOCATION %%
    N_VB  = cell(1,n_pos); % axial internal action in covered vane 
    N_BI  = cell(1,n_pos); % axial internal action in disclosed vane
    T_VB  = cell(1,n_pos); % shear internal action in covered vane 
    T_BI  = cell(1,n_pos); % shear internal action in disclosed vane 
    Mf_VB = cell(1,n_pos); % bending action in covered vane 
    Mf_BI = cell(1,n_pos); % bending action in disclosed vane 
    N     = cell(1,n_pos); % overall vane internal axial action
    T     = cell(1,n_pos); % overall vane internal shear action
    Mf    = cell(1,n_pos); % overall vane bending action
    
    %% PRELIMINARY CALCULATIONS
    rhol = mass_vane/(VI); % vane linear dinsity [kg/m]
    
    % Calcolo carichi distribuiti [N/m] 
    Q_Cexcl   = (C_izG-Mf_ax)./(VI);             % distributed momentum due to inertial moment and axial forces [N]
    Q_centr_j = repelem(F_centr_j/((VI)),n_pos); % distributed load of centrifugal force [N/m] 
    Q_cor     = F_cor./((VI));                   % distributed load of coriolis force [N/m] 
    Q_Fw_i    = Fw_i./((VI));                    % distributed load of i-comp. weight force [N/m] 
    Q_Fw_j    = Fw_j./((VI));                    % distributed load of j-comp. weight force [N/m] 
    Q_p_BI    = (p_2 - p_1)*L;                   % net distributed load of pressure force on exposed side [N/m] 
    Q_p_VB    = cell(1, n_pos);                  % net distributed load of pressure force on concealed side [N/m] 
    if s<toll_t                                  %  SEE NOTE
        Q_p_VB(1,:) = {0};                             
    else
        for i=1:n_pos
            Q_p_VB{1,i} = (p_2(i)-p_1(i))./(sVB{1,i}(end)).*(sVB{1,i})*L;
        end
    end
    
    % Projection of tip pressure and reaction forces onto i (axial-ax) and j (perpendicular-nm) to vane axis
    T_t_ax   = T_t.*sin(UPSILON);            % axial tip friction
    T_t_nm   = T_t.*cos(UPSILON);            % shear tip friction
    F_t_ax   = F_t.*cos(UPSILON);            % axial tip reaction
    F_t_nm   = F_t.*sin(UPSILON);            % shear tip reaction
    Fp1_t_ax = Fp_1_tip.*cos(UPSILON_tip_1); % axial tip pressure force suction side
    Fp1_t_nm = Fp_1_tip.*sin(UPSILON_tip_1); % shear tip pressure force suction side
    Fp2_t_ax = Fp_2_tip.*cos(UPSILON_tip_2); % axial tip pressure force pressure side
    Fp2_t_nm = Fp_2_tip.*sin(UPSILON_tip_2); % shear tip pressure force pressure side

   %% INTERNAL ACTION CALCULATION - numeric method %%
    for i = 1:n_pos 
        % internal action of concealed side
        N_VB{1,i}  =  T_v(i) .* ones(size(sVB{1,i})) - rhol.*sVB{1,i}.*(aIVcentr_i(2,i)-aGi(i)) - sVB{1,i}.*(-Q_Fw_i(i)) - rhol.*(aIVcentr_i(1,i)-aIVcentr_i(2,i))./(VI) .* (sVB{1,i}.^2/2) - Fp_cava(i) .* ones(size(sVB{1,i}));
        T_VB{1,i}  = -F_v(i) .* ones(size(sVB{1,i})) - sgn.*(Q_cor(i) + Q_centr_j(i)-Q_Fw_j(i)).*sVB{1,i} - (Q_p_VB{1,i})./2 .* (sVB{1,i});
        Mf_VB{1,i} =  F_v(i) .* sVB{1,i} + sgn.*( Q_cor(i) + Q_centr_j(i)-Q_Fw_j(i))./2 .* (sVB{1,i}.^2)  + (Q_p_VB{1,i})./6 .* (sVB{1,i}).^2 - Q_Cexcl(i).*(sVB{1,i});
        
        % internal action of exposed side
        % fliplr is needed to flip the values of the exposed part of the vane, since it has been decided to compute the internal action from the vane bottom
        N_BI{1,i}  = fliplr( rhol.*(sBI{1,i}).*(aIVcentr_i(2,i)-aGi(i)) + (sBI{1,i}).*(-Q_Fw_i(i))  +  rhol./(2*VI).*(aIVcentr_i(1,i)-aIVcentr_i(2,i)).*((VI)^2.* ones(size(sBI{1,i})) - (VI-sBI{1,i}).^2) - (F_t_ax(i) + T_t_ax(i) + Fp1_t_ax(i) + Fp2_t_ax(i) ).* ones(size(sBI{1,i})));
        T_BI{1,i}  = fliplr((T_t_nm(i) - F_t_nm(i) - Fp1_t_nm(i) + Fp2_t_nm(i)) .* ones(size(sBI{1,i})) + (sgn.*(Q_cor(i) + sgn.*Q_centr_j(i) - Q_Fw_j(i)) + Q_p_BI(i))    .*sBI{1,i});
        Mf_BI{1,i} = fliplr((T_t_nm(i) - F_t_nm(i) - Fp1_t_nm(i) + Fp2_t_nm(i)) .* sBI{1,i}             + (sgn.*(Q_cor(i) + sgn.*Q_centr_j(i) - Q_Fw_j(i)) + Q_p_BI(i))./2 .*sBI{1,i}.^2 + Q_Cexcl(i).*(sBI{1,i}));

        % overall internal action
        N{1,i}  = [ N_VB{1,i}   N_BI{1,i}  ];
        T{1,i}  = [ T_VB{1,i}   T_BI{1,i}  ];
        Mf{1,i} = [ Mf_VB{1,i}  Mf_BI{1,i} ];    
    end
    clear Q_Fw_i Q_cor Q_centr_j Q_Fw_j Q_p_VB Q_p_BI  T_t_ax T_t_nm F_t_ax F_t_nm N_VB N_BI T_VB T_BI Mf_VB Mf_BI
    
    %% MAX STRAIN SEARCH %%
    % since cast iron is most susceptible to bending action, the most
    % strained point is considered the one where Mf is maximum
    
    % Maximum bending moment for each discretized angular position
    m_Mf = NaN(1,length(Mf));        % preallocation
    for i = 1:length(Mf)
        m_Mf(i) = max(abs(Mf{1,i}));
    end

    % search of most strained angular position and most strained point
    [~, posMaxMf]   = max(m_Mf);                 % this is the most strained angular position    
    [~, s_posMaxMf] = max(abs(Mf{1,posMaxMf}));  % this is the most strained point (expressed as vane abscissa)
    
    %% INTERNAL ACTION EXTRACTION %%
    % From N, T, Mf is extracted the strain vector corresponding to the angular  
    % position where maxMf has been found 
    N_posMaxMf  = N{1,posMaxMf};
    T_posMaxMf  = T{1,posMaxMf};
    Mf_posMaxMf = Mf{1,posMaxMf};
    
    % Then the strain value in the most strained point is computed (SEE NOTE)
    if s_posMaxMf == pos_contct(posMaxMf) || s_posMaxMf == pos_contct(posMaxMf+1)
        N_cnt = [N_posMaxMf(s_posMaxMf) , N_posMaxMf(s_posMaxMf+1)];
        T_cnt = [T_posMaxMf(s_posMaxMf) , T_posMaxMf(s_posMaxMf+1)];
        [~,idxN] = max (abs(N_cnt));
        [~,idxT] = max (abs(T_cnt));
        N_sMaxMf = N_cnt(idxN);
        T_sMaxMf = T_cnt(idxT);
    else
        N_sMaxMf = N_posMaxMf(s_posMaxMf);
        T_sMaxMf = T_posMaxMf(s_posMaxMf);
    end
    MaxMf = max(m_Mf);
    clear m_Mf
      
    %% CHECKS %%
    % Check accuracy on N, T, Mf diagram in point B (discontinuity point)
    % for the angular position where maxMf has been found
    F_mM  = F_m(posMaxMf);          % F_m reaction force in most stressed point
    T_mM  = T_m(posMaxMf);          % T_m friction force in most stressed point
    cnt_a = pos_contct(posMaxMf);   % right side of contact point
    cnt_b = pos_contct(posMaxMf)+1; % left side of contact point

    % Check on N diagram discontinuity - discontinity must be equal to T_m
    dN_cnt = N_posMaxMf(cnt_b) - N_posMaxMf(cnt_a);
    errN   = abs((T_mM - dN_cnt) / T_mM);
    chck1  = errN > toll_d;
    
    % Check on T diagram discontinuity - discontinity must be equal to F_m
    dT_cnt = T_posMaxMf(cnt_b) - T_posMaxMf(cnt_a);
    errT   = abs((F_mM - dT_cnt) / F_mM);
    chck2  = errT > toll_d;

    % Check on Mf diagram continuity
    Mf_cnt_a = Mf_posMaxMf(cnt_a);
    Mf_cnt_b = Mf_posMaxMf(cnt_b);
    errM     = abs((Mf_cnt_a - Mf_cnt_b) / MaxMf);
    chck3    = errM > toll_d;
    
    if chck1 == 1
        warning('S5_MaxMfSearch:N','N internal action diagram not accurate. Estimated relative error: %2.4f %%',errN*100)
        SX_Logfile ('w',{strrep(lastwarn,'%','%%')});
    end
    
    if chck2 == 1
        warning('S5_MaxMfSearch:T','T internal action diagram not accurate. Estimated relative error: %2.4f %%',errT*100)
        SX_Logfile ('w',{strrep(lastwarn,'%','%%')});
    end
    
    if chck3 == 1
        warning('S5_MaxMfSearch:Mf','Mf internal action diagram not continuous. Estimated relative error: %2.4f %%',errM*100)
        SX_Logfile ('w',{strrep(lastwarn,'%','%%')});
    end
end